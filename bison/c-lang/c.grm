/**
 * Some Notes About This File
 *
 * I tried to be consistent about how I determine the space needed for the
 * malloc. The first number through to the last occurence of `strlen(...)'
 * should refer to the space necessary to store strings inserted via sprintf's
 * %s. The next three numbers are the "parens + whitespace + null". I elide
 * parens and whitespace when there are none. The space needed for null is
 * always 1.
 *
 * I believe CONSTANT refers to numbers. If that's the case, I'm assuming we're
 * dealing with no more than 25 digits (2^64 <= (2^10)^7 â‰ˆ 10^21). I'm not sure
 * how long an IEEE734 floating point number could display as. This could be a
 * source of segfaults.
 *
 **/

%{
  #include <string.h>
  #include <stdio.h>
  #define YYSTYPE char*
%}

%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

 /* remove dangling else */
%nonassoc ')'
%nonassoc ELSE

%output "c-parser.c"
%defines "c-parser.h"

%parse-param { char** result }

%start input
%%

input : translation_unit { *result = $1; };

primary_expression
  : IDENTIFIER { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + 1));
                 sprintf(str, "%s", $1);
                 $$ = str; }
	| CONSTANT { char* str = (char*)malloc(sizeof(char)*(22 + 1));
               sprintf(str, "%s", $1);
               $$ = str; }
	| STRING_LITERAL
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + 1 + 0 + 0 + 1));
      sprintf(str, "\"%s\"", $1);
      $$ = str; }
	| '(' expression ')' { $$ = $1; }
	;

postfix_expression
	: primary_expression { $$ = $1; }
	| postfix_expression '[' expression ']'
    { char* str = (char*)malloc(sizeof(char)*(9 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(array-ref %s %s)", $1, $3);
      $$ = str; }
	| postfix_expression '(' ')'
    { char* str = (char*)malloc(sizeof(char)*(7 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(funcall %s)", $1);
      $$ = str; }
	| postfix_expression '(' argument_expression_list ')'
    { char* str = (char*)malloc(sizeof(char)*(7 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(funcall %s %s)", $1, $3);
      $$ = str; }
	| postfix_expression '.' IDENTIFIER
    { char* str = (char*)malloc(sizeof(char)*(10 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(member-ref %s %s)", $1, $3);
      $$ = str; }
	| postfix_expression PTR_OP IDENTIFIER
    { char* str = (char*)malloc(sizeof(char)*(14 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(member-ref/ptr %s %s)", $1, $3);
      $$ = str; }
	| postfix_expression INC_OP
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(++ %s)", $1);
      $$ = str; }
	| postfix_expression DEC_OP
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(-- %s)", $1);
      $$ = str; }
	;

argument_expression_list
	: assignment_expression { $$ = $1; }
	| argument_expression_list ',' assignment_expression
    { int trimmed_length = strlen($1) - 2 + 1;
      char* trimmed_list = (char*)malloc(sizeof(char)*trimmed_length);
      memcpy(trimmed_list, $1 + 1, trimmed_length - 1);
      trimmed_list[trimmed_length - 1] = '\0';
      char* str = (char*)malloc(sizeof(char)*(strlen(trimmed_list) + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", trimmed_list, $3);
      free(trimmed_list);
      $$ = str; }
	;

unary_expression
	: postfix_expression { $$ = $1; }
	| INC_OP unary_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(++ %s)", $2);
      $$ = str; }
	| DEC_OP unary_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(-- %s)", $2);
      $$ = str; }
	| unary_operator cast_expression
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", $1, $2);
      $$ = str; }
	| SIZEOF unary_expression
    { char* str = (char*)malloc(sizeof(char)*(6 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(sizeof %s)", $2);
      $$ = str; }
	| SIZEOF '(' type_name ')'
    { char* str = (char*)malloc(sizeof(char)*(6 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(sizeof %s)", $3);
      $$ = str; }
	;

unary_operator
	: '&' { $$ = $1; }
	| '*' { $$ = $1; }
	| '+' { $$ = $1; }
	| '-' { $$ = $1; }
	| '~' { $$ = $1; }
	| '!' { $$ = $1; }
	;

cast_expression
	: unary_expression { $$ = $1; }
	| '(' type_name ')' cast_expression
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + strlen($4) + 2 + 2 + 1));
      sprintf(str, "(cast %s %s)", $2, $4);
      $$ = str; }
	;

multiplicative_expression
	: cast_expression { $$ = $1; }
	| multiplicative_expression '*' cast_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(* %s %s)", $1, $3);
      $$ = str; }
	| multiplicative_expression '/' cast_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(/ %s %s)", $1, $3);
      $$ = str; }
	| multiplicative_expression '%' cast_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(% %s %s)", $1, $3);
      $$ = str; }
	;

additive_expression
	: multiplicative_expression { $$ = $1; }
	| additive_expression '+' multiplicative_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(+ %s %s)", $1, $3);
      $$ = str; }
	| additive_expression '-' multiplicative_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(- %s %s)", $1, $3);
      $$ = str; }
	;

shift_expression
	: additive_expression { $$ = $1; }
	| shift_expression LEFT_OP additive_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(<< %s %s)", $1, $3);
      $$ = str; }
	| shift_expression RIGHT_OP additive_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(>> %s %s)", $1, $3);
      $$ = str; }
	;

relational_expression
	: shift_expression { $$ = $1; }
	| relational_expression '<' shift_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(< %s %s)", $1, $3);
      $$ = str; }
	| relational_expression '>' shift_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(> %s %s)", $1, $3);
      $$ = str; }
	| relational_expression LE_OP shift_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(<= %s %s)", $1, $3);
      $$ = str; }
	| relational_expression GE_OP shift_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(>= %s %s)", $1, $3);
      $$ = str; }
	;

equality_expression
	: relational_expression { $$ = $1; }
	| equality_expression EQ_OP relational_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(== %s %s)", $1, $3);
      $$ = str; }
	| equality_expression NE_OP relational_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(!= %s %s)", $1, $3);
      $$ = str; }
	;

and_expression
	: equality_expression { $$ = $1; }
	| and_expression '&' equality_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(& %s %s)", $1, $3);
      $$ = str; }
	;

exclusive_or_expression
	: and_expression { $$ = $1; }
	| exclusive_or_expression '^' and_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(^ %s %s)", $1, $3);

      $$ = str; }
	;

inclusive_or_expression
	: exclusive_or_expression { $$ = $1; }
	| inclusive_or_expression '|' exclusive_or_expression
    { char* str = (char*)malloc(sizeof(char)*(1 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(| %s %s)", $1, $3);
      $$ = str; }
	;

logical_and_expression
	: inclusive_or_expression { $$ = $1; }
	| logical_and_expression AND_OP inclusive_or_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(&& %s %s)", $1, $3);
      $$ = str; }
	;

logical_or_expression
	: logical_and_expression { $$ = $1; }
	| logical_or_expression OR_OP logical_and_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(|| %s %s)", $1, $3);
      $$ = str; }
	;

conditional_expression
	: logical_or_expression { $$ = $1; }
	| logical_or_expression '?' expression ':' conditional_expression
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($1) + strlen($3) + strlen($5) + 2 + 3 + 1));
      sprintf(str, "(?: %s %s %s)", $1, $3, $5);
      $$ = str; }
	;

assignment_expression
	: conditional_expression { $$ = $1; }
	| unary_expression assignment_operator assignment_expression
    { char* str = (char*)malloc(sizeof(char)*(strlen($2) + strlen($1) + strlen($3) + 2 + 3 + 1));
      sprintf(str, "(%s %s %s)", $2, $1, $3);
      $$ = str; }
	;

assignment_operator
	: '=' { $$ = $1;}
	| MUL_ASSIGN { $$ = $1;}
	| DIV_ASSIGN { $$ = $1;}
	| MOD_ASSIGN { $$ = $1;}
	| ADD_ASSIGN { $$ = $1;}
	| SUB_ASSIGN { $$ = $1;}
	| LEFT_ASSIGN { $$ = $1;}
	| RIGHT_ASSIGN { $$ = $1;}
	| AND_ASSIGN { $$ = $1;}
	| XOR_ASSIGN { $$ = $1;}
	| OR_ASSIGN { $$ = $1;}
	;

expression
	: assignment_expression { $$ = $1;}
	| expression ',' assignment_expression
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(begin %s %s)", $1, $3);
      $$ = str; }
	;

constant_expression
	: conditional_expression { $$ = $1;}
	;

declaration
	: declaration_specifiers ';'
    { char* str = (char*)malloc(sizeof(char)*(7 + strlen($1) + 4 + 1 + 1));
      sprintf(str, "(declare (%s))", $1);
      $$ = str; }
	| declaration_specifiers init_declarator_list ';'
	  { char* str = (char*)malloc(sizeof(char)*(7 + strlen($1) + strlen($2) + 4 + 1 + 1));
      sprintf(str, "(declare (%s) %s)", $1, $2);
      $$ = str; }
	;

declaration_specifiers
: storage_class_specifier { $$ = $1; }
	| storage_class_specifier declaration_specifiers
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
| type_specifier { $$ = $1; }
	| type_specifier declaration_specifiers
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
| type_qualifier { $$ = $1; }
	| type_qualifier declaration_specifiers
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	;

init_declarator_list
	: init_declarator { $$ = $1; }
	| init_declarator_list ',' init_declarator
    { int trimmed_length = strlen($1) - 2 + 1;
      char* trimmed_list = (char*)malloc(sizeof(char)*trimmed_length);
      memcpy(trimmed_list, $1 + 1, trimmed_length - 1);
      trimmed_list[trimmed_length - 1] = '\0';
      char* str = (char*)malloc(sizeof(char)*(strlen(trimmed_list) + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", trimmed_list, $3);
      free(trimmed_list);
      $$ = str; }
	;

init_declarator
	: declarator { $$ = $1; }
	| declarator '=' initializer
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(init %s %s)", $1, $3);
      $$ = str; }

	;

storage_class_specifier
	: TYPEDEF { $$ = $1; }
	| EXTERN { $$ = $1; }
	| STATIC { $$ = $1; }
	| AUTO { $$ = $1; }
	| REGISTER { $$ = $1; }
	;

type_specifier
	: VOID { $$ = $1; }
	| CHAR { $$ = $1; }
	| SHORT { $$ = $1; }
	| INT { $$ = $1; }
	| LONG { $$ = $1; }
	| FLOAT { $$ = $1; }
	| DOUBLE { $$ = $1; }
	| SIGNED { $$ = $1; }
	| UNSIGNED { $$ = $1; }
	| struct_or_union_specifier { $$ = $1; }
	| enum_specifier { $$ = $1; }
	| TYPE_NAME { $$ = $1; }
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + strlen($4) + 2 + 2 + 1));
      sprintf(str, "(%s %s %s)", $1, $2, $4);
      $$ = str; }
	| struct_or_union '{' struct_declaration_list '}'
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", $1, $3);
      $$ = str; }
	| struct_or_union IDENTIFIER
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", $1, $2);
      $$ = str; }
	;

struct_or_union
	: STRUCT { $$ = $1; }
	| UNION { $$ = $1; }
	;

struct_declaration_list
	: struct_declaration { $$ = $1; }
	| struct_declaration_list struct_declaration
    { int trimmed_length = strlen($1) - 2 + 1;
      char* trimmed_list = (char*)malloc(sizeof(char)*trimmed_length);
      memcpy(trimmed_list, $1 + 1, trimmed_length - 1);
      trimmed_list[trimmed_length - 1] = '\0';
      char* str = (char*)malloc(sizeof(char)*(strlen(trimmed_list) + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", trimmed_list, $2);
      free(trimmed_list);
      $$ = str; }
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 4 + 2 + 1));
      sprintf(str, "(struct-declare (%s) (%s))", $1, $2);
      $$ = str; }
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	| type_specifier { $$ = $1; }
	| type_qualifier specifier_qualifier_list
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	| type_qualifier { $$ = $1; }
	;

struct_declarator_list
	: struct_declarator { $$ = $1; }
	| struct_declarator_list ',' struct_declarator
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $3);
      $$ = str; }
	;

struct_declarator
	: declarator { $$ = $1; }
	| ':' constant_expression
    { char* str = (char*)malloc(sizeof(char)*(9 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(bit-field %s)", $2);
      $$ = str; }
	| declarator ':' constant_expression
    { char* str = (char*)malloc(sizeof(char)*(9 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(bit-field %s %s)", $1, $3);
      $$ = str; }
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($3) + 4 + 1 + 1));
      sprintf(str, "(enum (%s))", $1, $3);
      $$ = str; }
	| ENUM IDENTIFIER '{' enumerator_list '}'
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + strlen($4) + 4 + 2 + 1));
      sprintf(str, "(enum %s (%s))", $2, $4);
      $$ = str; }
	| ENUM IDENTIFIER
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(enum %s)", $2);
      $$ = str; }
	;

enumerator_list
	: enumerator { $$ = $1; }
	| enumerator_list ',' enumerator
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $3);
      $$ = str; }
	;

enumerator
	: IDENTIFIER { $$ = $1; }
	| IDENTIFIER '=' constant_expression
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(%s %s)", $1, $3);
      $$ = str; }
	;

type_qualifier
	: CONST { $$ = $1; }
	| VOLATILE { $$ = $1; }
	;

declarator
	: pointer direct_declarator
    { char* str = (char*)malloc(sizeof(char)*(3 + strlen($1) + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(ptr %s %s)", $1, $2);
      $$ = str; }
	| direct_declarator { $$ = $1; }
	;

direct_declarator
	: IDENTIFIER { $$ = $1; }
	| '(' declarator ')' { $$ = $1; }
	| direct_declarator '[' constant_expression ']'
    { char* str = (char*)malloc(sizeof(char)*(10 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(array-type %s %s)", $1, $3);
      $$ = str; }
	| direct_declarator '[' ']'
    { char* str = (char*)malloc(sizeof(char)*(10 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(array-type %s)", $1);
      $$ = str; }
	| direct_declarator '(' parameter_type_list ')'
    { char* str = (char*)malloc(sizeof(char)*(16 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(func-type/params %s (%s))", $1, $3);
      $$ = str; }
	| direct_declarator '(' identifier_list ')'
    { char* str = (char*)malloc(sizeof(char)*(13 + strlen($1) + strlen($3) + 4 + 2 + 1));
      sprintf(str, "(func-type/ids %s (%s))", $1, $3);
      $$ = str; }
	| direct_declarator '(' ')'
    { char* str = (char*)malloc(sizeof(char)*(13 + strlen($1) + 4 + 2 + 1));
      sprintf(str, "(func-type/ids %s ())", $1);
      $$ = str; }
	;

pointer
	: '*' { $$ = "ptr*"; }
	| '*' type_qualifier_list
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + 4 + 1 + 1));
      sprintf(str, "(ptr* (%s))", $2);
      $$ = str; }
	| '*' pointer
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(ptr* %s)", $2);
      $$ = str; }
	| '*' type_qualifier_list pointer
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + strlen($3) + 4 + 2 + 1));
      sprintf(str, "(ptr* (%s) %s)", $2, $3);
      $$ = str; }
	;

type_qualifier_list
	: type_qualifier
    { $$ = $1; }
	| type_qualifier_list type_qualifier
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	;


parameter_type_list
	: parameter_list
    { $$ = $1; }
	| parameter_list ',' ELLIPSIS
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + 3 + 0 + 1 + 1));
      sprintf(str, "%s ...", $1);
      $$ = str; }
	;

parameter_list
	: parameter_declaration
    { $$ = $1; }
	| parameter_list ',' parameter_declaration
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	;

parameter_declaration
	: declaration_specifiers declarator
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($1) + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(param %s %s)", $1, $2);
      $$ = str; }
	| declaration_specifiers abstract_declarator
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($1) + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(param %s %s)", $1, $2);
      $$ = str; }
	| declaration_specifiers
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($1) + 2 + 2 + 1));
      sprintf(str, "(param %s)", $1);
      $$ = str; }
	;

identifier_list
	: IDENTIFIER
    { $$ = $1; }
	| identifier_list ',' IDENTIFIER
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $3);
      $$ = str; }
	;

type_name
	: specifier_qualifier_list
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(type (%s))", $1);
      $$ = str; }
	| specifier_qualifier_list abstract_declarator
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($1) + strlen($2) + 4 + 2 + 1));
      sprintf(str, "(type (%s) %s)", $1, $2);
      $$ = str; }
	;

abstract_declarator
	: pointer
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(abs-decl %s)", $1);
      $$ = str; }
	| direct_abstract_declarator
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(abs-decl %s)", $1);
      $$ = str; }
	| pointer direct_abstract_declarator
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(abs-decl %s %s)", $1, $2);
      $$ = str; }
	;

direct_abstract_declarator
	: '(' abstract_declarator ')'
    { char* str = (char*)malloc(sizeof(char)*(12 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(dir-abs-decl %s)", $2);
      $$ = str; }
	| '[' ']'
    { char* str = (char*)malloc(sizeof(char)*(18 + 2 + 2 + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/array #f #f)");
      $$ = str; }
	| '[' constant_expression ']'
    { char* str = (char*)malloc(sizeof(char)*(18 + 2 + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/array #f %s)", $2);
      $$ = str; }
	| direct_abstract_declarator '[' ']'
    { char* str = (char*)malloc(sizeof(char)*(18 + strlen($1) + 2 + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/array %s #f)", $1);
      $$ = str; }
	| direct_abstract_declarator '[' constant_expression ']'
    { char* str = (char*)malloc(sizeof(char)*(18 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/array %s %s)", $1, $3);
      $$ = str; }
	| '(' ')'
    { char* str = (char*)malloc(sizeof(char)*(17 + 2 + 2 + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/func #f #f)");
      $$ = str; }
	| '(' parameter_type_list ')'
    { char* str = (char*)malloc(sizeof(char)*(17 + 2 + strlen($2) + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/func #f %s)", $2);
      $$ = str; }
	| direct_abstract_declarator '(' ')'
    { char* str = (char*)malloc(sizeof(char)*(17 + strlen($1) + 2 + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/func %s #f)", $1);
      $$ = str; }
	| direct_abstract_declarator '(' parameter_type_list ')'
    { char* str = (char*)malloc(sizeof(char)*(17 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(dir-abs-decl/func %s %s)", $1, $3);
      $$ = str; }
	;

initializer
	: assignment_expression { $$ = $1; }
	| '{' initializer_list '}'
    { char* str = (char*)malloc(sizeof(char)*(14 + strlen($2) + 4 + 1 + 1));
      sprintf(str, "(struct-literal (%s))", $2);
      $$ = str; }
	| '{' initializer_list ',' '}'
    { char* str = (char*)malloc(sizeof(char)*(14 + strlen($2) + 4 + 1 + 1));
      sprintf(str, "(struct-literal (%s))", $2);
      $$ = str; }
	;

initializer_list
	: initializer { $$ = $1; }
	| initializer_list ',' initializer
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($3) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $3);
      $$ = str; }
	;

statement
	: labeled_statement { $$ = $1; }
	| compound_statement { $$ = $1; }
	| expression_statement { $$ = $1; }
	| selection_statement { $$ = $1; }
	| iteration_statement { $$ = $1; }
	| jump_statement { $$ = $1; }
	;

labeled_statement
	: IDENTIFIER ':' statement
    { char* str = (char*)malloc(sizeof(char)*(13 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(labeled-point %s %s)", $1, $3);
      $$ = str; }
	| CASE constant_expression ':' statement
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($1) + strlen($3) + 2 + 2 + 1));
      sprintf(str, "(case %s %s)", $1, $3);
      $$ = str; }
	| DEFAULT ':' statement
    { char* str = (char*)malloc(sizeof(char)*(7 + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(default %s)", $3);
      $$ = str; }
	;

compound_statement
	: '{' '}'
    { char* str = (char*)malloc(sizeof(char)*(5 + 2 + 0 + 1));
      sprintf(str, "(block)");
      $$ = str; }
	| '{' statement_list '}'
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(block %s)", $2);
      $$ = str; }
	| '{' declaration_list '}'
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(block %s)", $2);
      $$ = str; }
	| '{' declaration_list statement_list '}'
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($2) + strlen($3) + 2 + 1 + 1));
      sprintf(str, "(block %s %s)", $2, $3);
      $$ = str; }
	;

declaration_list
	: declaration { $$ = $1; }
	| declaration_list declaration
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	;

statement_list
	: statement { $$ = $1; }
	| statement_list statement
    { char* str = (char*)malloc(sizeof(char)*(strlen($1) + strlen($2) + 0 + 1 + 1));
      sprintf(str, "%s %s", $1, $2);
      $$ = str; }
	;

expression_statement
	: ';' { $$ = ""; }
	| expression ';' { $$ = $1; }
	;

selection_statement
	: IF '(' expression ')' statement
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($3) + strlen($5) + 2 + 2 + 1));
      sprintf(str, "(if %s %s)", $3, $5);
      $$ = str; }
	| IF '(' expression ')' statement ELSE statement
    { char* str = (char*)malloc(sizeof(char)*(2 + strlen($3) + strlen($5) + strlen($7)
                                                + 2 + 3 + 1));
      sprintf(str, "(if %s %s %s)", $3, $5, $7);
      $$ = str; }
	| SWITCH '(' expression ')' statement
    { char* str = (char*)malloc(sizeof(char)*(6 + strlen($3) + strlen($5) + 2 + 2 + 1));
      sprintf(str, "(switch %s %s)", $3, $5);
      $$ = str; }
	;

iteration_statement
	: WHILE '(' expression ')' statement
    { char* str = (char*)malloc(sizeof(char)*(5 + strlen($3) + strlen($5) + 2 + 2 + 1));
      sprintf(str, "(while %s %s)", $3, $5);
      $$ = str; }
	| DO statement WHILE '(' expression ')' ';'
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($2) + strlen($5) + 2 + 2 + 1));
      sprintf(str, "(do-while %s %s)", $2, $5);
      $$ = str; }
	| FOR '(' expression_statement expression_statement ')' statement
    { char* str = (char*)malloc(sizeof(char)*(3 + strlen($3) + strlen($4) + strlen($6)
                                                + 4 + 3 + 1));
      sprintf(str, "(for (%s %s) %s)", $3, $4, $6);
      $$ = str; }
	| FOR '(' expression_statement expression_statement expression ')' statement
    { char* str = (char*)malloc(sizeof(char)*(3 + strlen($3) + strlen($4) + strlen($5)
                                                + strlen($7)
                                                + 4 + 3 + 1));
      sprintf(str, "(for (%s %s %s) %s)", $3, $4, $5, $7);
      $$ = str; }
	;

jump_statement
	: GOTO IDENTIFIER ';'
    { char* str = (char*)malloc(sizeof(char)*(4 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(goto %s)", $2);
      $$ = str; }
	| CONTINUE ';'
    { char* str = (char*)malloc(sizeof(char)*(8 + 2 + 0 + 1));
      sprintf(str, "(continue)");
      $$ = str; }
	| BREAK ';'
    { char* str = (char*)malloc(sizeof(char)*(5 + 2 + 0 + 1));
      sprintf(str, "(break)");
      $$ = str; }
	| RETURN ';'
    { char* str = (char*)malloc(sizeof(char)*(6 + 2 + 0 + 1));
      sprintf(str, "(return)");
      $$ = str; }
	| RETURN expression ';'
    { char* str = (char*)malloc(sizeof(char)*(6 + strlen($2) + 2 + 1 + 1));
      sprintf(str, "(return %s)", $2);
      $$ = str; }
	;

translation_unit
	: external_declaration
    { char* str = (char*)malloc(sizeof(char)*(16 + strlen($1) + 2 + 1 + 1));
      sprintf(str, "(translation-unit %s)", $1);
      $$ = str; }
	| translation_unit external_declaration
    { int trimmed_length = strlen($1) - 16 - 2 + 1;
      char* trimmed_list = (char*)malloc(sizeof(char)*trimmed_length);
      memcpy(trimmed_list, $1 + 17, trimmed_length - 1);
      trimmed_list[trimmed_length - 1] = '\0';
      char* str = (char*)malloc(sizeof(char)*(16 + strlen(trimmed_list) + strlen($2)
                                                 + 2 + 2 + 1));
      sprintf(str, "(translation-unit %s %s)", trimmed_list, $2);
      free(trimmed_list);
      $$ = str; }
	;

external_declaration
	: function_definition { $$ = $1; }
	| declaration { $$ = $1; }
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + strlen($2)
                                                + strlen($3) + strlen($4)
                                                + 6 + 4 + 1));
      sprintf(str, "(func-def (%s %s (%s)) %s)", $1, $2, $3, $4);
      $$ = str; }
	| declaration_specifiers declarator compound_statement
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + strlen($2)
                                                + strlen($3)
                                                + 6 + 4 + 1));
      sprintf(str, "(func-def (%s %s ()) %s)", $1, $2, $3);
      $$ = str; }
	| declarator declaration_list compound_statement
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + strlen($2)
                                                + strlen($3)
                                                + 6 + 3 + 1));
      sprintf(str, "(func-def (%s (%s)) %s)", $1, $2, $3);
      $$ = str; }
	| declarator compound_statement
    { char* str = (char*)malloc(sizeof(char)*(8 + strlen($1) + strlen($2)
                                                + 6 + 3 + 1));
      sprintf(str, "(func-def (%s ()) %s)", $1, $2);
      $$ = str; }
	;

%%
#include <stdio.h>

/* extern char yytext[]; */
extern int column;

yyerror(s)
char *s;
{
	fflush(stdout);
	printf("\n%*s\n%*s\n", column, "^", column, s);
}
